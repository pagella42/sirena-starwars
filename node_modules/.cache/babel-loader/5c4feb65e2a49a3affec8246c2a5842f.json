{"ast":null,"code":"var _jsxFileName = \"/Users/francopagella/Desktop/code/week10/crm/crm/src/components/routes/analytics/charts/Charts.js\";\nimport React, { Component } from 'react';\nimport TopEmployees from './TopEmployees';\nimport SalesByCounty from './SalesByCountry';\nimport SalesSince from './SalesSince';\n\nclass Charts extends Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  topEmployees() {\n    let topEmployees = [];\n    let emp = {};\n    let employees = [];\n    this.props.clients.forEach(c => {\n      if (emp[c.owner]) {\n        emp[c.owner] += 1;\n      } else {\n        emp[c.owner] = 1;\n        employees.push(c.owner);\n      }\n    });\n    employees.forEach(e => topEmployees.push({\n      name: e,\n      sales: emp[e]\n    }));\n    topEmployees.sort((a, b) => a.sales < b.sales ? 1 : b.sales < a.sales ? -1 : 0);\n    topEmployees.splice(3);\n    return topEmployees;\n  }\n\n  salesByCountry() {\n    let salesCountries = [];\n    let sales = {};\n    let countries = [];\n    this.props.clients.forEach(c => {\n      if (sales[c.country]) {\n        sales[c.country] += 1;\n      } else {\n        sales[c.country] = 1;\n        countries.push(c.country);\n      }\n    });\n    countries.forEach(e => salesCountries.push({\n      country: e,\n      sales: sales[e]\n    }));\n    return salesCountries;\n  }\n\n  salesSince() {\n    let today = new Date();\n    let date = 2017 + '-' + today.getDate() + '-' + today.getMonth(); // year at 2017 cause data is old\n\n    let maxdate = 2018 + '-' + today.getDate() + '-' + (today.getMonth() + 1);\n    let salesByDate = [];\n    let datesCount = {};\n    let dates = [];\n    this.props.clients.forEach(c => {\n      if (c.firstContact > date && c.firstContact < maxdate) {\n        if (datesCount[c.firstContact]) {\n          datesCount[c.firstContact] += 1;\n        } else {\n          datesCount[c.firstContact] = 1;\n          dates.push(c.firstContact);\n        }\n      }\n    });\n    dates.forEach(e => {\n      salesByDate.push({\n        date: e,\n        sales: datesCount[e]\n      });\n    }); // console.log(salesByDate)\n\n    return salesByDate.sort((a, b) => a.date > b.date ? 1 : b.date > a.date ? -1 : 0);\n  }\n\n  render() {\n    let employees = this.topEmployees();\n    let countries = this.salesByCountry();\n    let salesSince = this.salesSince(); // console.log(salesSince)\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(TopEmployees, {\n      topEmployees: employees,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(SalesByCounty, {\n      countries: countries,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(SalesSince, {\n      sales: salesSince,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Charts;","map":{"version":3,"sources":["/Users/francopagella/Desktop/code/week10/crm/crm/src/components/routes/analytics/charts/Charts.js"],"names":["React","Component","TopEmployees","SalesByCounty","SalesSince","Charts","constructor","state","topEmployees","emp","employees","props","clients","forEach","c","owner","push","e","name","sales","sort","a","b","splice","salesByCountry","salesCountries","countries","country","salesSince","today","Date","date","getDate","getMonth","maxdate","salesByDate","datesCount","dates","firstContact","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport TopEmployees from './TopEmployees'\nimport SalesByCounty from './SalesByCountry';\nimport SalesSince from './SalesSince';\n\nclass Charts extends Component {\n    constructor() {\n        super()\n        this.state = {\n        }\n\n    }\n    topEmployees() {\n        let topEmployees = []\n        let emp = {}\n        let employees = []\n        this.props.clients.forEach(c => {\n            if (emp[c.owner]) {\n                emp[c.owner] += 1\n            }\n            else {\n                emp[c.owner] = 1\n                employees.push(c.owner)\n            }\n        })\n        employees.forEach(e => topEmployees.push({ name: e, sales: emp[e] }))\n        topEmployees.sort((a, b) => (a.sales < b.sales) ? 1 : ((b.sales < a.sales) ? -1 : 0))\n        topEmployees.splice(3)\n        return topEmployees\n\n    }\n    salesByCountry() {\n        let salesCountries = []\n        let sales = {}\n        let countries = []\n\n        this.props.clients.forEach(c => {\n            if (sales[c.country]) {\n                sales[c.country] += 1\n            }\n            else {\n                sales[c.country] = 1\n                countries.push(c.country)\n            }\n        })\n        countries.forEach(e => salesCountries.push({ country: e, sales: sales[e] }))\n        return salesCountries\n    }\n    salesSince() {\n        let today = new Date()\n        let date = 2017  + '-' + today.getDate() + '-' + (today.getMonth()) // year at 2017 cause data is old\n        let maxdate = 2018  + '-' + today.getDate() + '-' + (today.getMonth() + 1)\n\n        let salesByDate = []\n        let datesCount = {}\n        let dates = []\n\n        this.props.clients.forEach(c => {\n            if (c.firstContact > date && c.firstContact < maxdate) {\n                if (datesCount[c.firstContact]) {\n                    datesCount[c.firstContact] += 1\n                }\n                else {\n                    datesCount[c.firstContact] = 1\n                    dates.push(c.firstContact)\n                }\n            }\n\n        })\n        dates.forEach(e => { salesByDate.push({ date: e, sales: datesCount[e] }) })\n        // console.log(salesByDate)\n        \n        return salesByDate.sort((a, b) => (a.date > b.date) ? 1 : ((b.date > a.date) ? -1 : 0))\n    }\n    render() {\n\n        let employees = this.topEmployees()\n        let countries = this.salesByCountry()\n        let salesSince = this.salesSince()\n        // console.log(salesSince)\n\n\n        return (<div>\n            <TopEmployees topEmployees={employees} />\n            <SalesByCounty countries={countries} />\n            <SalesSince sales={salesSince} />\n        </div>)\n    }\n}\nexport default Charts;"]},"metadata":{},"sourceType":"module"}